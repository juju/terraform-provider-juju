name: Test new juju candidates


on:
  pull_request:
    
# Commented for testing
#   schedule:
#     - cron: "0 0 * * *"  # Run at 12AM UTC, every day


# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  test:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        juju_track:
          - "2.9"
        juju_risk:
          - "candidate"
          - "edge"
        terraform:
          - "0.15.*"
          - "1.0.*"
          - "1.1.*"
          - "1.2.*"

    steps:
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        id: download_artifact
        with:
          workflow_conclusion: success
          name: ${{ matrix.juju_track }}-${{ matrix.juju_risk }} 
          if_no_artifact_found: ignore
      - name: Check latest juju version tested
        shell: bash
        run: |
          channel="${{ matrix.juju_track }}/${{ matrix.juju_risk}}"
          echo "Target channel is $channel"
          candidate=$(snap info juju | grep $channel | awk '{print $2}')
          last_tested=NA
          if [ -f ${{ channel }} ]; then
            last_tested=$(cat juju-last-candidate-version)
          fi
          echo "Last tested was $last_tested"
          echo "Latest juju version found is $candidate"
          next_test=NA
          if [[ "$candidate" == "^" ]]; then
            echo "No candidate to test"
          else
            if [[ "$candidate" == "$last_tested" ]]; then
              echo "Candidate $candidate was already tested"
            else
              echo "Candidate $candidate has to be tested"
              next_test="$candidate"
            fi 
          fi
          echo "next-test=$next_test" >> $GITHUB_ENV
          echo "$next_test" > ~/${{ channel }}
      - name: Checkout branch
        if: ${{ env.next-test != 'NA' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ env.juju_track }}
      - name: Setup go
        if: ${{ env.next-test != 'NA' }}
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Install terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false
      - name: Install target juju
        if: ${{ env.next-test != 'NA' }}
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: lxd
          juju-channel: ${{ matrix.juju_track }}/${{ matrix.juju_risk}}
      - name: "Set environment to configure provider"
        # language=bash
        run: |
          CONTROLLER=$(juju whoami --format yaml | yq .controller)

          echo "JUJU_CONTROLLER_ADDRESSES=$(juju show-controller | yq .$CONTROLLER.details.api-endpoints | yq -r '. | join(",")')" >> $GITHUB_ENV
          echo "JUJU_USERNAME=$(juju show-controller | yq .$CONTROLLER.account.user)"  >> $GITHUB_ENV
          echo "JUJU_PASSWORD=$(cat ~/.local/share/juju/accounts.yaml | yq .controllers.$CONTROLLER.password)"  >> $GITHUB_ENV
          echo "JUJU_CA_CERT<<EOF" >> $GITHUB_ENV
          juju show-controller | yq .$CONTROLLER.details.ca-cert >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Run integration tests
        env:
          TF_ACC: "1"
        run: go test -v -cover ./internal/provider/
        timeout-minutes: 25   
      - if: ${{ env.next-test != 'NA' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.juju_track }}-${{ matrix.juju_risk}}
          path: ~/${{ matrix.juju_track }}-${{ matrix.juju_risk}}
