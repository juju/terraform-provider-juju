# A similar set of tests to test_integration but against a JAAS controller
name: Integration tests with JAAS

# This GitHub action runs your tests for each pull request.
on:
  pull_request:
    paths-ignore:
      - "README.md"
      - "project-docs/**"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE.md"
  push:
    branches:
      - "main"
    paths-ignore:
      - "README.md"
      - "project-docs/**"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE.md"
  workflow_dispatch:

# Testing needs read permission and access to Github's container registry to pull JIMM.
permissions:
  contents: read
  packages: read

jobs:
  # Ensure project builds before running test
  build:
    name: Build-JAAS
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - run: go build -v .

  test:
    name: Integration-JAAS
    needs: build
    runs-on: [self-hosted, jammy, x64]
    strategy:
      fail-fast: false
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.*"
          terraform_wrapper: false
      - name: Upgrade docker compose.
        run: |
          sudo apt-get remove -y --purge docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc
          sudo rm -rf /etc/docker
          sudo apt-get autoremove -y --purge  docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc
          sudo snap install docker --channel latest/edge
      # Starting JAAS will start the JIMM controller and dependencies and create a Juju controller on LXD and connect it to JIMM.
      - name: Setup JAAS
        uses: canonical/jimm/.github/actions/test-server@v3
        id: jaas
        with:
          juju-channel: 3/stable
          jimm-version: v3.2.10
          ghcr-pat: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup microk8s for juju_kubernetes_cloud test
        run: |
          sudo snap install microk8s --channel=1.28-strict/stable
          sudo usermod -a -G snap_microk8s $USER
          sudo chown -R $USER ~/.kube
          sudo microk8s.enable dns
          sudo microk8s.enable storage
          sudo microk8s.enable hostpath-storage
          sudo -g snap_microk8s -E microk8s status --wait-ready --timeout=600
          sudo microk8s.config view | tee /home/$USER/microk8s-config.yaml
          echo "MICROK8S_CONFIG<<EOF" >> $GITHUB_ENV
          echo "$(cat /home/${USER}/microk8s-config.yaml)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create additional networks when testing with LXD
        run: |
          sudo lxc network create management-br ipv4.address=10.150.40.1/24 ipv4.nat=true ipv6.address=none ipv6.nat=false
          sudo lxc network create public-br ipv4.address=10.170.80.1/24 ipv4.nat=true ipv6.address=none ipv6.nat=false
      - name: "Set environment to configure provider"
        # language=bash
        run: |
          CONTROLLER=$(juju whoami --format yaml | yq .controller)
          
          echo "IS_JAAS=true" >> $GITHUB_ENV
          echo "JUJU_AGENT_VERSION=$(juju show-controller | yq .$CONTROLLER.details.agent-version |tr -d '"')" >> $GITHUB_ENV
          echo "JUJU_CONTROLLER_ADDRESSES=$(juju show-controller | yq .$CONTROLLER.details.api-endpoints | yq -r '. | join(",")')" >> $GITHUB_ENV
          echo "JUJU_CLIENT_ID=${{ steps.jaas.outputs.client-id }}"  >> $GITHUB_ENV
          echo "JUJU_CLIENT_SECRET=${{ steps.jaas.outputs.client-secret }}"  >> $GITHUB_ENV
          echo "JUJU_CA_CERT<<EOF" >> $GITHUB_ENV
          echo "${{ steps.jaas.outputs.ca-cert }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TEST_MANAGEMENT_BR=10.150.40.0/24" >> $GITHUB_ENV
          echo "TEST_PUBLIC_BR=10.170.80.0/24" >> $GITHUB_ENV
      - run: go mod download
      - env:
          TF_ACC: "1"
          TEST_CLOUD: "lxd"
        run: go test -parallel 1 -timeout 90m -v -cover ./internal/provider/
        timeout-minutes: 90
