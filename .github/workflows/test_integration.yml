# Terraform Provider testing workflow using different terraform versions
# and clouds.
name: Integration tests

# This GitHub action runs your tests for each pull request.
on:
  pull_request:
    paths-ignore:
      - "README.md"
      - "project-docs/**"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE.md"
  push:
    branches:
      - "main"
    paths-ignore:
      - "README.md"
      - "project-docs/**"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE.md"

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: [self-hosted, jammy]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - run: go build -v .

  # Run acceptance tests in a matrix with Terraform CLI versions
  test:
    name: Integration
    needs: build
    runs-on: [self-hosted, jammy]
    strategy:
      fail-fast: false
      matrix:
        terraform: ["1.7.*", "1.8.*", "1.9.*"]
        action-operator:
          - { lxd-channel: "5.21/stable", cloud: "lxd", cloud-channel: "5.21", juju: "2.9" }
          - { lxd-channel: "5.21/stable", cloud: "lxd", cloud-channel: "5.21", juju: "3" }
          - { lxd-channel: "5.21/stable", cloud: "microk8s", cloud-channel: "1.28-strict", juju: "3.1" }
          - { lxd-channel: "5.21/stable", cloud: "microk8s", cloud-channel: "1.28-strict", juju: "3" }
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: ${{ matrix.action-operator.cloud }}
          channel: ${{ matrix.action-operator.cloud-channel }}
          juju-channel: ${{ matrix.action-operator.juju }}
          lxd-channel: ${{ matrix.action-operator.lxd-channel }}
      - name: In case of LXD setup also microk8s
        if: ${{ matrix.action-operator.cloud == 'lxd' }}
        run: |
          sudo snap install microk8s --channel=1.28-strict/stable
          sudo usermod -a -G snap_microk8s $USER
          sudo chown -R $USER ~/.kube
          sudo microk8s.enable dns storage
          sudo microk8s.enable dns local-storage
          sudo -g snap_microk8s -E microk8s status --wait-ready --timeout=600
      - name: Create additional networks when testing with LXD
        if: ${{ matrix.action-operator.cloud == 'lxd' }}
        run: |
          sudo lxc network create management-br ipv4.address=10.150.40.1/24 ipv4.nat=true ipv6.address=none ipv6.nat=false
          sudo lxc network create public-br ipv4.address=10.170.80.1/24 ipv4.nat=true ipv6.address=none ipv6.nat=false
      - name: "Set environment to configure provider"
        # language=bash
        run: |
          CONTROLLER=$(juju whoami --format yaml | yq .controller)

          echo "JUJU_AGENT_VERSION=$(juju show-controller | yq .$CONTROLLER.details.agent-version |tr -d '"')" >> $GITHUB_ENV
          echo "JUJU_CONTROLLER_ADDRESSES=$(juju show-controller | yq .$CONTROLLER.details.api-endpoints | yq -r '. | join(",")')" >> $GITHUB_ENV
          echo "JUJU_USERNAME=$(juju show-controller | yq .$CONTROLLER.account.user)"  >> $GITHUB_ENV
          echo "JUJU_PASSWORD=$(cat ~/.local/share/juju/accounts.yaml | yq .controllers.$CONTROLLER.password)"  >> $GITHUB_ENV
          echo "JUJU_CA_CERT<<EOF" >> $GITHUB_ENV
          juju show-controller | yq .$CONTROLLER.details.ca-cert >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TEST_MANAGEMENT_BR=10.150.40.0/24" >> $GITHUB_ENV
          echo "TEST_PUBLIC_BR=10.170.80.0/24" >> $GITHUB_ENV
      - name: "Set additional environment for LXD"
        # setup the microk8s config to be used by the tests.
        if: ${{ matrix.action-operator.cloud == 'lxd' }}
        # language=bash
        run: |
          sudo microk8s.config > /home/$USER/microk8s-config.yaml
      - run: go mod download
      - env:
          TF_ACC: "1"
          TEST_CLOUD: ${{ matrix.action-operator.cloud }}
        run: go test -parallel 1 -timeout 40m -v -cover ./internal/provider/
        timeout-minutes: 40
