// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/terraform-provider-juju/internal/juju (interfaces: SharedClient,ClientAPIClient,ApplicationAPIClient,ModelConfigAPIClient,ResourceAPIClient,SecretAPIClient,JaasAPIClient,KubernetesCloudAPIClient,CharmhubClient)
//
// Generated by this command:
//
//	mockgen -typed -package juju -destination mock_test.go github.com/juju/terraform-provider-juju/internal/juju SharedClient,ClientAPIClient,ApplicationAPIClient,ModelConfigAPIClient,ResourceAPIClient,SecretAPIClient,JaasAPIClient,KubernetesCloudAPIClient,CharmhubClient
//

// Package juju is a generated GoMock package.
package juju

import (
	context "context"
	io "io"
	reflect "reflect"

	params "github.com/canonical/jimm-go-sdk/v3/api/params"
	charm "github.com/juju/charm/v12"
	resource "github.com/juju/charm/v12/resource"
	api "github.com/juju/juju/api"
	application "github.com/juju/juju/api/client/application"
	client "github.com/juju/juju/api/client/client"
	resources "github.com/juju/juju/api/client/resources"
	secrets "github.com/juju/juju/api/client/secrets"
	charm0 "github.com/juju/juju/api/common/charm"
	charmhub "github.com/juju/juju/charmhub"
	transport "github.com/juju/juju/charmhub/transport"
	cloud "github.com/juju/juju/cloud"
	constraints "github.com/juju/juju/core/constraints"
	model "github.com/juju/juju/core/model"
	resources0 "github.com/juju/juju/core/resources"
	secrets0 "github.com/juju/juju/core/secrets"
	params0 "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockSharedClient is a mock of SharedClient interface.
type MockSharedClient struct {
	ctrl     *gomock.Controller
	recorder *MockSharedClientMockRecorder
	isgomock struct{}
}

// MockSharedClientMockRecorder is the mock recorder for MockSharedClient.
type MockSharedClientMockRecorder struct {
	mock *MockSharedClient
}

// NewMockSharedClient creates a new mock instance.
func NewMockSharedClient(ctrl *gomock.Controller) *MockSharedClient {
	mock := &MockSharedClient{ctrl: ctrl}
	mock.recorder = &MockSharedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedClient) EXPECT() *MockSharedClientMockRecorder {
	return m.recorder
}

// AddExternalControllerConf mocks base method.
func (m *MockSharedClient) AddExternalControllerConf(name string, conf ControllerConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalControllerConf", name, conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExternalControllerConf indicates an expected call of AddExternalControllerConf.
func (mr *MockSharedClientMockRecorder) AddExternalControllerConf(name, conf any) *MockSharedClientAddExternalControllerConfCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalControllerConf", reflect.TypeOf((*MockSharedClient)(nil).AddExternalControllerConf), name, conf)
	return &MockSharedClientAddExternalControllerConfCall{Call: call}
}

// MockSharedClientAddExternalControllerConfCall wrap *gomock.Call
type MockSharedClientAddExternalControllerConfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientAddExternalControllerConfCall) Return(arg0 error) *MockSharedClientAddExternalControllerConfCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientAddExternalControllerConfCall) Do(f func(string, ControllerConfiguration) error) *MockSharedClientAddExternalControllerConfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientAddExternalControllerConfCall) DoAndReturn(f func(string, ControllerConfiguration) error) *MockSharedClientAddExternalControllerConfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddModel mocks base method.
func (m *MockSharedClient) AddModel(modelName, modelOwner, modelUUID string, modelType model.ModelType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddModel", modelName, modelOwner, modelUUID, modelType)
}

// AddModel indicates an expected call of AddModel.
func (mr *MockSharedClientMockRecorder) AddModel(modelName, modelOwner, modelUUID, modelType any) *MockSharedClientAddModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddModel", reflect.TypeOf((*MockSharedClient)(nil).AddModel), modelName, modelOwner, modelUUID, modelType)
	return &MockSharedClientAddModelCall{Call: call}
}

// MockSharedClientAddModelCall wrap *gomock.Call
type MockSharedClientAddModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientAddModelCall) Return() *MockSharedClientAddModelCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientAddModelCall) Do(f func(string, string, string, model.ModelType)) *MockSharedClientAddModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientAddModelCall) DoAndReturn(f func(string, string, string, model.ModelType)) *MockSharedClientAddModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Debugf mocks base method.
func (m *MockSharedClient) Debugf(msg string, additionalFields ...map[string]any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range additionalFields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockSharedClientMockRecorder) Debugf(msg any, additionalFields ...any) *MockSharedClientDebugfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, additionalFields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockSharedClient)(nil).Debugf), varargs...)
	return &MockSharedClientDebugfCall{Call: call}
}

// MockSharedClientDebugfCall wrap *gomock.Call
type MockSharedClientDebugfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientDebugfCall) Return() *MockSharedClientDebugfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientDebugfCall) Do(f func(string, ...map[string]any)) *MockSharedClientDebugfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientDebugfCall) DoAndReturn(f func(string, ...map[string]any)) *MockSharedClientDebugfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Errorf mocks base method.
func (m *MockSharedClient) Errorf(err error, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Errorf", err, msg)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockSharedClientMockRecorder) Errorf(err, msg any) *MockSharedClientErrorfCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockSharedClient)(nil).Errorf), err, msg)
	return &MockSharedClientErrorfCall{Call: call}
}

// MockSharedClientErrorfCall wrap *gomock.Call
type MockSharedClientErrorfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientErrorfCall) Return() *MockSharedClientErrorfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientErrorfCall) Do(f func(error, string)) *MockSharedClientErrorfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientErrorfCall) DoAndReturn(f func(error, string)) *MockSharedClientErrorfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConnection mocks base method.
func (m *MockSharedClient) GetConnection(modelUUID *string) (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", modelUUID)
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockSharedClientMockRecorder) GetConnection(modelUUID any) *MockSharedClientGetConnectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockSharedClient)(nil).GetConnection), modelUUID)
	return &MockSharedClientGetConnectionCall{Call: call}
}

// MockSharedClientGetConnectionCall wrap *gomock.Call
type MockSharedClientGetConnectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientGetConnectionCall) Return(arg0 api.Connection, arg1 error) *MockSharedClientGetConnectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientGetConnectionCall) Do(f func(*string) (api.Connection, error)) *MockSharedClientGetConnectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientGetConnectionCall) DoAndReturn(f func(*string) (api.Connection, error)) *MockSharedClientGetConnectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetExternalControllerConn mocks base method.
func (m *MockSharedClient) GetExternalControllerConn(name string) (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalControllerConn", name)
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalControllerConn indicates an expected call of GetExternalControllerConn.
func (mr *MockSharedClientMockRecorder) GetExternalControllerConn(name any) *MockSharedClientGetExternalControllerConnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalControllerConn", reflect.TypeOf((*MockSharedClient)(nil).GetExternalControllerConn), name)
	return &MockSharedClientGetExternalControllerConnCall{Call: call}
}

// MockSharedClientGetExternalControllerConnCall wrap *gomock.Call
type MockSharedClientGetExternalControllerConnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientGetExternalControllerConnCall) Return(arg0 api.Connection, arg1 error) *MockSharedClientGetExternalControllerConnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientGetExternalControllerConnCall) Do(f func(string) (api.Connection, error)) *MockSharedClientGetExternalControllerConnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientGetExternalControllerConnCall) DoAndReturn(f func(string) (api.Connection, error)) *MockSharedClientGetExternalControllerConnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JujuLogger mocks base method.
func (m *MockSharedClient) JujuLogger() *jujuLoggerShim {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JujuLogger")
	ret0, _ := ret[0].(*jujuLoggerShim)
	return ret0
}

// JujuLogger indicates an expected call of JujuLogger.
func (mr *MockSharedClientMockRecorder) JujuLogger() *MockSharedClientJujuLoggerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JujuLogger", reflect.TypeOf((*MockSharedClient)(nil).JujuLogger))
	return &MockSharedClientJujuLoggerCall{Call: call}
}

// MockSharedClientJujuLoggerCall wrap *gomock.Call
type MockSharedClientJujuLoggerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientJujuLoggerCall) Return(arg0 *jujuLoggerShim) *MockSharedClientJujuLoggerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientJujuLoggerCall) Do(f func() *jujuLoggerShim) *MockSharedClientJujuLoggerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientJujuLoggerCall) DoAndReturn(f func() *jujuLoggerShim) *MockSharedClientJujuLoggerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelOwnerAndName mocks base method.
func (m *MockSharedClient) ModelOwnerAndName(modelUUID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelOwnerAndName", modelUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ModelOwnerAndName indicates an expected call of ModelOwnerAndName.
func (mr *MockSharedClientMockRecorder) ModelOwnerAndName(modelUUID any) *MockSharedClientModelOwnerAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelOwnerAndName", reflect.TypeOf((*MockSharedClient)(nil).ModelOwnerAndName), modelUUID)
	return &MockSharedClientModelOwnerAndNameCall{Call: call}
}

// MockSharedClientModelOwnerAndNameCall wrap *gomock.Call
type MockSharedClientModelOwnerAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientModelOwnerAndNameCall) Return(arg0, arg1 string, arg2 error) *MockSharedClientModelOwnerAndNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientModelOwnerAndNameCall) Do(f func(string) (string, string, error)) *MockSharedClientModelOwnerAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientModelOwnerAndNameCall) DoAndReturn(f func(string) (string, string, error)) *MockSharedClientModelOwnerAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelStatus mocks base method.
func (m *MockSharedClient) ModelStatus(modelUUID string, conn api.Connection) (*params0.FullStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelStatus", modelUUID, conn)
	ret0, _ := ret[0].(*params0.FullStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelStatus indicates an expected call of ModelStatus.
func (mr *MockSharedClientMockRecorder) ModelStatus(modelUUID, conn any) *MockSharedClientModelStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelStatus", reflect.TypeOf((*MockSharedClient)(nil).ModelStatus), modelUUID, conn)
	return &MockSharedClientModelStatusCall{Call: call}
}

// MockSharedClientModelStatusCall wrap *gomock.Call
type MockSharedClientModelStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientModelStatusCall) Return(arg0 *params0.FullStatus, arg1 error) *MockSharedClientModelStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientModelStatusCall) Do(f func(string, api.Connection) (*params0.FullStatus, error)) *MockSharedClientModelStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientModelStatusCall) DoAndReturn(f func(string, api.Connection) (*params0.FullStatus, error)) *MockSharedClientModelStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelType mocks base method.
func (m *MockSharedClient) ModelType(modelUUID string) (model.ModelType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelType", modelUUID)
	ret0, _ := ret[0].(model.ModelType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelType indicates an expected call of ModelType.
func (mr *MockSharedClientMockRecorder) ModelType(modelUUID any) *MockSharedClientModelTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelType", reflect.TypeOf((*MockSharedClient)(nil).ModelType), modelUUID)
	return &MockSharedClientModelTypeCall{Call: call}
}

// MockSharedClientModelTypeCall wrap *gomock.Call
type MockSharedClientModelTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientModelTypeCall) Return(arg0 model.ModelType, arg1 error) *MockSharedClientModelTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientModelTypeCall) Do(f func(string) (model.ModelType, error)) *MockSharedClientModelTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientModelTypeCall) DoAndReturn(f func(string) (model.ModelType, error)) *MockSharedClientModelTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockSharedClient) ModelUUID(modelName, modelOwner string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID", modelName, modelOwner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockSharedClientMockRecorder) ModelUUID(modelName, modelOwner any) *MockSharedClientModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockSharedClient)(nil).ModelUUID), modelName, modelOwner)
	return &MockSharedClientModelUUIDCall{Call: call}
}

// MockSharedClientModelUUIDCall wrap *gomock.Call
type MockSharedClientModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientModelUUIDCall) Return(arg0 string, arg1 error) *MockSharedClientModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientModelUUIDCall) Do(f func(string, string) (string, error)) *MockSharedClientModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientModelUUIDCall) DoAndReturn(f func(string, string) (string, error)) *MockSharedClientModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveModel mocks base method.
func (m *MockSharedClient) RemoveModel(modelUUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveModel", modelUUID)
}

// RemoveModel indicates an expected call of RemoveModel.
func (mr *MockSharedClientMockRecorder) RemoveModel(modelUUID any) *MockSharedClientRemoveModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveModel", reflect.TypeOf((*MockSharedClient)(nil).RemoveModel), modelUUID)
	return &MockSharedClientRemoveModelCall{Call: call}
}

// MockSharedClientRemoveModelCall wrap *gomock.Call
type MockSharedClientRemoveModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientRemoveModelCall) Return() *MockSharedClientRemoveModelCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientRemoveModelCall) Do(f func(string)) *MockSharedClientRemoveModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientRemoveModelCall) DoAndReturn(f func(string)) *MockSharedClientRemoveModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tracef mocks base method.
func (m *MockSharedClient) Tracef(msg string, additionalFields ...map[string]any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range additionalFields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Tracef", varargs...)
}

// Tracef indicates an expected call of Tracef.
func (mr *MockSharedClientMockRecorder) Tracef(msg any, additionalFields ...any) *MockSharedClientTracefCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, additionalFields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracef", reflect.TypeOf((*MockSharedClient)(nil).Tracef), varargs...)
	return &MockSharedClientTracefCall{Call: call}
}

// MockSharedClientTracefCall wrap *gomock.Call
type MockSharedClientTracefCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientTracefCall) Return() *MockSharedClientTracefCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientTracefCall) Do(f func(string, ...map[string]any)) *MockSharedClientTracefCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientTracefCall) DoAndReturn(f func(string, ...map[string]any)) *MockSharedClientTracefCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitForResource mocks base method.
func (m *MockSharedClient) WaitForResource() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForResource")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitForResource indicates an expected call of WaitForResource.
func (mr *MockSharedClientMockRecorder) WaitForResource() *MockSharedClientWaitForResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForResource", reflect.TypeOf((*MockSharedClient)(nil).WaitForResource))
	return &MockSharedClientWaitForResourceCall{Call: call}
}

// MockSharedClientWaitForResourceCall wrap *gomock.Call
type MockSharedClientWaitForResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientWaitForResourceCall) Return(arg0 bool) *MockSharedClientWaitForResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientWaitForResourceCall) Do(f func() bool) *MockSharedClientWaitForResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientWaitForResourceCall) DoAndReturn(f func() bool) *MockSharedClientWaitForResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warnf mocks base method.
func (m *MockSharedClient) Warnf(msg string, additionalFields ...map[string]any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range additionalFields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockSharedClientMockRecorder) Warnf(msg any, additionalFields ...any) *MockSharedClientWarnfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, additionalFields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockSharedClient)(nil).Warnf), varargs...)
	return &MockSharedClientWarnfCall{Call: call}
}

// MockSharedClientWarnfCall wrap *gomock.Call
type MockSharedClientWarnfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedClientWarnfCall) Return() *MockSharedClientWarnfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedClientWarnfCall) Do(f func(string, ...map[string]any)) *MockSharedClientWarnfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedClientWarnfCall) DoAndReturn(f func(string, ...map[string]any)) *MockSharedClientWarnfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClientAPIClient is a mock of ClientAPIClient interface.
type MockClientAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIClientMockRecorder
	isgomock struct{}
}

// MockClientAPIClientMockRecorder is the mock recorder for MockClientAPIClient.
type MockClientAPIClientMockRecorder struct {
	mock *MockClientAPIClient
}

// NewMockClientAPIClient creates a new mock instance.
func NewMockClientAPIClient(ctrl *gomock.Controller) *MockClientAPIClient {
	mock := &MockClientAPIClient{ctrl: ctrl}
	mock.recorder = &MockClientAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAPIClient) EXPECT() *MockClientAPIClientMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockClientAPIClient) Status(args *client.StatusArgs) (*params0.FullStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", args)
	ret0, _ := ret[0].(*params0.FullStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockClientAPIClientMockRecorder) Status(args any) *MockClientAPIClientStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClientAPIClient)(nil).Status), args)
	return &MockClientAPIClientStatusCall{Call: call}
}

// MockClientAPIClientStatusCall wrap *gomock.Call
type MockClientAPIClientStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientAPIClientStatusCall) Return(arg0 *params0.FullStatus, arg1 error) *MockClientAPIClientStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientAPIClientStatusCall) Do(f func(*client.StatusArgs) (*params0.FullStatus, error)) *MockClientAPIClientStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientAPIClientStatusCall) DoAndReturn(f func(*client.StatusArgs) (*params0.FullStatus, error)) *MockClientAPIClientStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationAPIClient is a mock of ApplicationAPIClient interface.
type MockApplicationAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationAPIClientMockRecorder
	isgomock struct{}
}

// MockApplicationAPIClientMockRecorder is the mock recorder for MockApplicationAPIClient.
type MockApplicationAPIClientMockRecorder struct {
	mock *MockApplicationAPIClient
}

// NewMockApplicationAPIClient creates a new mock instance.
func NewMockApplicationAPIClient(ctrl *gomock.Controller) *MockApplicationAPIClient {
	mock := &MockApplicationAPIClient{ctrl: ctrl}
	mock.recorder = &MockApplicationAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationAPIClient) EXPECT() *MockApplicationAPIClientMockRecorder {
	return m.recorder
}

// AddUnits mocks base method.
func (m *MockApplicationAPIClient) AddUnits(args application.AddUnitsParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUnits", args)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUnits indicates an expected call of AddUnits.
func (mr *MockApplicationAPIClientMockRecorder) AddUnits(args any) *MockApplicationAPIClientAddUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnits", reflect.TypeOf((*MockApplicationAPIClient)(nil).AddUnits), args)
	return &MockApplicationAPIClientAddUnitsCall{Call: call}
}

// MockApplicationAPIClientAddUnitsCall wrap *gomock.Call
type MockApplicationAPIClientAddUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientAddUnitsCall) Return(arg0 []string, arg1 error) *MockApplicationAPIClientAddUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientAddUnitsCall) Do(f func(application.AddUnitsParams) ([]string, error)) *MockApplicationAPIClientAddUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientAddUnitsCall) DoAndReturn(f func(application.AddUnitsParams) ([]string, error)) *MockApplicationAPIClientAddUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationsInfo mocks base method.
func (m *MockApplicationAPIClient) ApplicationsInfo(applications []names.ApplicationTag) ([]params0.ApplicationInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationsInfo", applications)
	ret0, _ := ret[0].([]params0.ApplicationInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationsInfo indicates an expected call of ApplicationsInfo.
func (mr *MockApplicationAPIClientMockRecorder) ApplicationsInfo(applications any) *MockApplicationAPIClientApplicationsInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationsInfo", reflect.TypeOf((*MockApplicationAPIClient)(nil).ApplicationsInfo), applications)
	return &MockApplicationAPIClientApplicationsInfoCall{Call: call}
}

// MockApplicationAPIClientApplicationsInfoCall wrap *gomock.Call
type MockApplicationAPIClientApplicationsInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientApplicationsInfoCall) Return(arg0 []params0.ApplicationInfoResult, arg1 error) *MockApplicationAPIClientApplicationsInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientApplicationsInfoCall) Do(f func([]names.ApplicationTag) ([]params0.ApplicationInfoResult, error)) *MockApplicationAPIClientApplicationsInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientApplicationsInfoCall) DoAndReturn(f func([]names.ApplicationTag) ([]params0.ApplicationInfoResult, error)) *MockApplicationAPIClientApplicationsInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Deploy mocks base method.
func (m *MockApplicationAPIClient) Deploy(args application.DeployArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockApplicationAPIClientMockRecorder) Deploy(args any) *MockApplicationAPIClientDeployCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockApplicationAPIClient)(nil).Deploy), args)
	return &MockApplicationAPIClientDeployCall{Call: call}
}

// MockApplicationAPIClientDeployCall wrap *gomock.Call
type MockApplicationAPIClientDeployCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientDeployCall) Return(arg0 error) *MockApplicationAPIClientDeployCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientDeployCall) Do(f func(application.DeployArgs) error) *MockApplicationAPIClientDeployCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientDeployCall) DoAndReturn(f func(application.DeployArgs) error) *MockApplicationAPIClientDeployCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeployFromRepository mocks base method.
func (m *MockApplicationAPIClient) DeployFromRepository(arg application.DeployFromRepositoryArg) (application.DeployInfo, []application.PendingResourceUpload, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployFromRepository", arg)
	ret0, _ := ret[0].(application.DeployInfo)
	ret1, _ := ret[1].([]application.PendingResourceUpload)
	ret2, _ := ret[2].([]error)
	return ret0, ret1, ret2
}

// DeployFromRepository indicates an expected call of DeployFromRepository.
func (mr *MockApplicationAPIClientMockRecorder) DeployFromRepository(arg any) *MockApplicationAPIClientDeployFromRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployFromRepository", reflect.TypeOf((*MockApplicationAPIClient)(nil).DeployFromRepository), arg)
	return &MockApplicationAPIClientDeployFromRepositoryCall{Call: call}
}

// MockApplicationAPIClientDeployFromRepositoryCall wrap *gomock.Call
type MockApplicationAPIClientDeployFromRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientDeployFromRepositoryCall) Return(arg0 application.DeployInfo, arg1 []application.PendingResourceUpload, arg2 []error) *MockApplicationAPIClientDeployFromRepositoryCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientDeployFromRepositoryCall) Do(f func(application.DeployFromRepositoryArg) (application.DeployInfo, []application.PendingResourceUpload, []error)) *MockApplicationAPIClientDeployFromRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientDeployFromRepositoryCall) DoAndReturn(f func(application.DeployFromRepositoryArg) (application.DeployInfo, []application.PendingResourceUpload, []error)) *MockApplicationAPIClientDeployFromRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyApplications mocks base method.
func (m *MockApplicationAPIClient) DestroyApplications(in application.DestroyApplicationsParams) ([]params0.DestroyApplicationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyApplications", in)
	ret0, _ := ret[0].([]params0.DestroyApplicationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyApplications indicates an expected call of DestroyApplications.
func (mr *MockApplicationAPIClientMockRecorder) DestroyApplications(in any) *MockApplicationAPIClientDestroyApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyApplications", reflect.TypeOf((*MockApplicationAPIClient)(nil).DestroyApplications), in)
	return &MockApplicationAPIClientDestroyApplicationsCall{Call: call}
}

// MockApplicationAPIClientDestroyApplicationsCall wrap *gomock.Call
type MockApplicationAPIClientDestroyApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientDestroyApplicationsCall) Return(arg0 []params0.DestroyApplicationResult, arg1 error) *MockApplicationAPIClientDestroyApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientDestroyApplicationsCall) Do(f func(application.DestroyApplicationsParams) ([]params0.DestroyApplicationResult, error)) *MockApplicationAPIClientDestroyApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientDestroyApplicationsCall) DoAndReturn(f func(application.DestroyApplicationsParams) ([]params0.DestroyApplicationResult, error)) *MockApplicationAPIClientDestroyApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyUnits mocks base method.
func (m *MockApplicationAPIClient) DestroyUnits(in application.DestroyUnitsParams) ([]params0.DestroyUnitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyUnits", in)
	ret0, _ := ret[0].([]params0.DestroyUnitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyUnits indicates an expected call of DestroyUnits.
func (mr *MockApplicationAPIClientMockRecorder) DestroyUnits(in any) *MockApplicationAPIClientDestroyUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyUnits", reflect.TypeOf((*MockApplicationAPIClient)(nil).DestroyUnits), in)
	return &MockApplicationAPIClientDestroyUnitsCall{Call: call}
}

// MockApplicationAPIClientDestroyUnitsCall wrap *gomock.Call
type MockApplicationAPIClientDestroyUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientDestroyUnitsCall) Return(arg0 []params0.DestroyUnitResult, arg1 error) *MockApplicationAPIClientDestroyUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientDestroyUnitsCall) Do(f func(application.DestroyUnitsParams) ([]params0.DestroyUnitResult, error)) *MockApplicationAPIClientDestroyUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientDestroyUnitsCall) DoAndReturn(f func(application.DestroyUnitsParams) ([]params0.DestroyUnitResult, error)) *MockApplicationAPIClientDestroyUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Expose mocks base method.
func (m *MockApplicationAPIClient) Expose(application string, exposedEndpoints map[string]params0.ExposedEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expose", application, exposedEndpoints)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expose indicates an expected call of Expose.
func (mr *MockApplicationAPIClientMockRecorder) Expose(application, exposedEndpoints any) *MockApplicationAPIClientExposeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expose", reflect.TypeOf((*MockApplicationAPIClient)(nil).Expose), application, exposedEndpoints)
	return &MockApplicationAPIClientExposeCall{Call: call}
}

// MockApplicationAPIClientExposeCall wrap *gomock.Call
type MockApplicationAPIClientExposeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientExposeCall) Return(arg0 error) *MockApplicationAPIClientExposeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientExposeCall) Do(f func(string, map[string]params0.ExposedEndpoint) error) *MockApplicationAPIClientExposeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientExposeCall) DoAndReturn(f func(string, map[string]params0.ExposedEndpoint) error) *MockApplicationAPIClientExposeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockApplicationAPIClient) Get(branchName, application string) (*params0.ApplicationGetResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", branchName, application)
	ret0, _ := ret[0].(*params0.ApplicationGetResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockApplicationAPIClientMockRecorder) Get(branchName, application any) *MockApplicationAPIClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationAPIClient)(nil).Get), branchName, application)
	return &MockApplicationAPIClientGetCall{Call: call}
}

// MockApplicationAPIClientGetCall wrap *gomock.Call
type MockApplicationAPIClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientGetCall) Return(arg0 *params0.ApplicationGetResults, arg1 error) *MockApplicationAPIClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientGetCall) Do(f func(string, string) (*params0.ApplicationGetResults, error)) *MockApplicationAPIClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientGetCall) DoAndReturn(f func(string, string) (*params0.ApplicationGetResults, error)) *MockApplicationAPIClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmURLOrigin mocks base method.
func (m *MockApplicationAPIClient) GetCharmURLOrigin(branchName, applicationName string) (*charm.URL, charm0.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmURLOrigin", branchName, applicationName)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(charm0.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmURLOrigin indicates an expected call of GetCharmURLOrigin.
func (mr *MockApplicationAPIClientMockRecorder) GetCharmURLOrigin(branchName, applicationName any) *MockApplicationAPIClientGetCharmURLOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmURLOrigin", reflect.TypeOf((*MockApplicationAPIClient)(nil).GetCharmURLOrigin), branchName, applicationName)
	return &MockApplicationAPIClientGetCharmURLOriginCall{Call: call}
}

// MockApplicationAPIClientGetCharmURLOriginCall wrap *gomock.Call
type MockApplicationAPIClientGetCharmURLOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientGetCharmURLOriginCall) Return(arg0 *charm.URL, arg1 charm0.Origin, arg2 error) *MockApplicationAPIClientGetCharmURLOriginCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientGetCharmURLOriginCall) Do(f func(string, string) (*charm.URL, charm0.Origin, error)) *MockApplicationAPIClientGetCharmURLOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientGetCharmURLOriginCall) DoAndReturn(f func(string, string) (*charm.URL, charm0.Origin, error)) *MockApplicationAPIClientGetCharmURLOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConstraints mocks base method.
func (m *MockApplicationAPIClient) GetConstraints(applications ...string) ([]constraints.Value, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range applications {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConstraints", varargs...)
	ret0, _ := ret[0].([]constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConstraints indicates an expected call of GetConstraints.
func (mr *MockApplicationAPIClientMockRecorder) GetConstraints(applications ...any) *MockApplicationAPIClientGetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConstraints", reflect.TypeOf((*MockApplicationAPIClient)(nil).GetConstraints), applications...)
	return &MockApplicationAPIClientGetConstraintsCall{Call: call}
}

// MockApplicationAPIClientGetConstraintsCall wrap *gomock.Call
type MockApplicationAPIClientGetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientGetConstraintsCall) Return(arg0 []constraints.Value, arg1 error) *MockApplicationAPIClientGetConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientGetConstraintsCall) Do(f func(...string) ([]constraints.Value, error)) *MockApplicationAPIClientGetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientGetConstraintsCall) DoAndReturn(f func(...string) ([]constraints.Value, error)) *MockApplicationAPIClientGetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MergeBindings mocks base method.
func (m *MockApplicationAPIClient) MergeBindings(req params0.ApplicationMergeBindingsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBindings", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeBindings indicates an expected call of MergeBindings.
func (mr *MockApplicationAPIClientMockRecorder) MergeBindings(req any) *MockApplicationAPIClientMergeBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBindings", reflect.TypeOf((*MockApplicationAPIClient)(nil).MergeBindings), req)
	return &MockApplicationAPIClientMergeBindingsCall{Call: call}
}

// MockApplicationAPIClientMergeBindingsCall wrap *gomock.Call
type MockApplicationAPIClientMergeBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientMergeBindingsCall) Return(arg0 error) *MockApplicationAPIClientMergeBindingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientMergeBindingsCall) Do(f func(params0.ApplicationMergeBindingsArgs) error) *MockApplicationAPIClientMergeBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientMergeBindingsCall) DoAndReturn(f func(params0.ApplicationMergeBindingsArgs) error) *MockApplicationAPIClientMergeBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScaleApplication mocks base method.
func (m *MockApplicationAPIClient) ScaleApplication(in application.ScaleApplicationParams) (params0.ScaleApplicationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleApplication", in)
	ret0, _ := ret[0].(params0.ScaleApplicationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleApplication indicates an expected call of ScaleApplication.
func (mr *MockApplicationAPIClientMockRecorder) ScaleApplication(in any) *MockApplicationAPIClientScaleApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleApplication", reflect.TypeOf((*MockApplicationAPIClient)(nil).ScaleApplication), in)
	return &MockApplicationAPIClientScaleApplicationCall{Call: call}
}

// MockApplicationAPIClientScaleApplicationCall wrap *gomock.Call
type MockApplicationAPIClientScaleApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientScaleApplicationCall) Return(arg0 params0.ScaleApplicationResult, arg1 error) *MockApplicationAPIClientScaleApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientScaleApplicationCall) Do(f func(application.ScaleApplicationParams) (params0.ScaleApplicationResult, error)) *MockApplicationAPIClientScaleApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientScaleApplicationCall) DoAndReturn(f func(application.ScaleApplicationParams) (params0.ScaleApplicationResult, error)) *MockApplicationAPIClientScaleApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharm mocks base method.
func (m *MockApplicationAPIClient) SetCharm(branchName string, cfg application.SetCharmConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharm", branchName, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharm indicates an expected call of SetCharm.
func (mr *MockApplicationAPIClientMockRecorder) SetCharm(branchName, cfg any) *MockApplicationAPIClientSetCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharm", reflect.TypeOf((*MockApplicationAPIClient)(nil).SetCharm), branchName, cfg)
	return &MockApplicationAPIClientSetCharmCall{Call: call}
}

// MockApplicationAPIClientSetCharmCall wrap *gomock.Call
type MockApplicationAPIClientSetCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientSetCharmCall) Return(arg0 error) *MockApplicationAPIClientSetCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientSetCharmCall) Do(f func(string, application.SetCharmConfig) error) *MockApplicationAPIClientSetCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientSetCharmCall) DoAndReturn(f func(string, application.SetCharmConfig) error) *MockApplicationAPIClientSetCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockApplicationAPIClient) SetConfig(branchName, application, configYAML string, config map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", branchName, application, configYAML, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockApplicationAPIClientMockRecorder) SetConfig(branchName, application, configYAML, config any) *MockApplicationAPIClientSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockApplicationAPIClient)(nil).SetConfig), branchName, application, configYAML, config)
	return &MockApplicationAPIClientSetConfigCall{Call: call}
}

// MockApplicationAPIClientSetConfigCall wrap *gomock.Call
type MockApplicationAPIClientSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientSetConfigCall) Return(arg0 error) *MockApplicationAPIClientSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientSetConfigCall) Do(f func(string, string, string, map[string]string) error) *MockApplicationAPIClientSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientSetConfigCall) DoAndReturn(f func(string, string, string, map[string]string) error) *MockApplicationAPIClientSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConstraints mocks base method.
func (m *MockApplicationAPIClient) SetConstraints(application string, constraints constraints.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConstraints", application, constraints)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockApplicationAPIClientMockRecorder) SetConstraints(application, constraints any) *MockApplicationAPIClientSetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockApplicationAPIClient)(nil).SetConstraints), application, constraints)
	return &MockApplicationAPIClientSetConstraintsCall{Call: call}
}

// MockApplicationAPIClientSetConstraintsCall wrap *gomock.Call
type MockApplicationAPIClientSetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientSetConstraintsCall) Return(arg0 error) *MockApplicationAPIClientSetConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientSetConstraintsCall) Do(f func(string, constraints.Value) error) *MockApplicationAPIClientSetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientSetConstraintsCall) DoAndReturn(f func(string, constraints.Value) error) *MockApplicationAPIClientSetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unexpose mocks base method.
func (m *MockApplicationAPIClient) Unexpose(application string, endpoints []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unexpose", application, endpoints)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unexpose indicates an expected call of Unexpose.
func (mr *MockApplicationAPIClientMockRecorder) Unexpose(application, endpoints any) *MockApplicationAPIClientUnexposeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unexpose", reflect.TypeOf((*MockApplicationAPIClient)(nil).Unexpose), application, endpoints)
	return &MockApplicationAPIClientUnexposeCall{Call: call}
}

// MockApplicationAPIClientUnexposeCall wrap *gomock.Call
type MockApplicationAPIClientUnexposeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientUnexposeCall) Return(arg0 error) *MockApplicationAPIClientUnexposeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientUnexposeCall) Do(f func(string, []string) error) *MockApplicationAPIClientUnexposeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientUnexposeCall) DoAndReturn(f func(string, []string) error) *MockApplicationAPIClientUnexposeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnsetApplicationConfig mocks base method.
func (m *MockApplicationAPIClient) UnsetApplicationConfig(branchName, application string, keys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetApplicationConfig", branchName, application, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetApplicationConfig indicates an expected call of UnsetApplicationConfig.
func (mr *MockApplicationAPIClientMockRecorder) UnsetApplicationConfig(branchName, application, keys any) *MockApplicationAPIClientUnsetApplicationConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetApplicationConfig", reflect.TypeOf((*MockApplicationAPIClient)(nil).UnsetApplicationConfig), branchName, application, keys)
	return &MockApplicationAPIClientUnsetApplicationConfigCall{Call: call}
}

// MockApplicationAPIClientUnsetApplicationConfigCall wrap *gomock.Call
type MockApplicationAPIClientUnsetApplicationConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIClientUnsetApplicationConfigCall) Return(arg0 error) *MockApplicationAPIClientUnsetApplicationConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIClientUnsetApplicationConfigCall) Do(f func(string, string, []string) error) *MockApplicationAPIClientUnsetApplicationConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIClientUnsetApplicationConfigCall) DoAndReturn(f func(string, string, []string) error) *MockApplicationAPIClientUnsetApplicationConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigAPIClient is a mock of ModelConfigAPIClient interface.
type MockModelConfigAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigAPIClientMockRecorder
	isgomock struct{}
}

// MockModelConfigAPIClientMockRecorder is the mock recorder for MockModelConfigAPIClient.
type MockModelConfigAPIClientMockRecorder struct {
	mock *MockModelConfigAPIClient
}

// NewMockModelConfigAPIClient creates a new mock instance.
func NewMockModelConfigAPIClient(ctrl *gomock.Controller) *MockModelConfigAPIClient {
	mock := &MockModelConfigAPIClient{ctrl: ctrl}
	mock.recorder = &MockModelConfigAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigAPIClient) EXPECT() *MockModelConfigAPIClientMockRecorder {
	return m.recorder
}

// ModelGet mocks base method.
func (m *MockModelConfigAPIClient) ModelGet() (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelGet")
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelGet indicates an expected call of ModelGet.
func (mr *MockModelConfigAPIClientMockRecorder) ModelGet() *MockModelConfigAPIClientModelGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelGet", reflect.TypeOf((*MockModelConfigAPIClient)(nil).ModelGet))
	return &MockModelConfigAPIClientModelGetCall{Call: call}
}

// MockModelConfigAPIClientModelGetCall wrap *gomock.Call
type MockModelConfigAPIClientModelGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigAPIClientModelGetCall) Return(arg0 map[string]any, arg1 error) *MockModelConfigAPIClientModelGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigAPIClientModelGetCall) Do(f func() (map[string]any, error)) *MockModelConfigAPIClientModelGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigAPIClientModelGetCall) DoAndReturn(f func() (map[string]any, error)) *MockModelConfigAPIClientModelGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceAPIClient is a mock of ResourceAPIClient interface.
type MockResourceAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceAPIClientMockRecorder
	isgomock struct{}
}

// MockResourceAPIClientMockRecorder is the mock recorder for MockResourceAPIClient.
type MockResourceAPIClientMockRecorder struct {
	mock *MockResourceAPIClient
}

// NewMockResourceAPIClient creates a new mock instance.
func NewMockResourceAPIClient(ctrl *gomock.Controller) *MockResourceAPIClient {
	mock := &MockResourceAPIClient{ctrl: ctrl}
	mock.recorder = &MockResourceAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceAPIClient) EXPECT() *MockResourceAPIClientMockRecorder {
	return m.recorder
}

// AddPendingResources mocks base method.
func (m *MockResourceAPIClient) AddPendingResources(args resources.AddPendingResourcesArgs) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPendingResources", args)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPendingResources indicates an expected call of AddPendingResources.
func (mr *MockResourceAPIClientMockRecorder) AddPendingResources(args any) *MockResourceAPIClientAddPendingResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPendingResources", reflect.TypeOf((*MockResourceAPIClient)(nil).AddPendingResources), args)
	return &MockResourceAPIClientAddPendingResourcesCall{Call: call}
}

// MockResourceAPIClientAddPendingResourcesCall wrap *gomock.Call
type MockResourceAPIClientAddPendingResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceAPIClientAddPendingResourcesCall) Return(arg0 []string, arg1 error) *MockResourceAPIClientAddPendingResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceAPIClientAddPendingResourcesCall) Do(f func(resources.AddPendingResourcesArgs) ([]string, error)) *MockResourceAPIClientAddPendingResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceAPIClientAddPendingResourcesCall) DoAndReturn(f func(resources.AddPendingResourcesArgs) ([]string, error)) *MockResourceAPIClientAddPendingResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResources mocks base method.
func (m *MockResourceAPIClient) ListResources(applications []string) ([]resources0.ApplicationResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", applications)
	ret0, _ := ret[0].([]resources0.ApplicationResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockResourceAPIClientMockRecorder) ListResources(applications any) *MockResourceAPIClientListResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockResourceAPIClient)(nil).ListResources), applications)
	return &MockResourceAPIClientListResourcesCall{Call: call}
}

// MockResourceAPIClientListResourcesCall wrap *gomock.Call
type MockResourceAPIClientListResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceAPIClientListResourcesCall) Return(arg0 []resources0.ApplicationResources, arg1 error) *MockResourceAPIClientListResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceAPIClientListResourcesCall) Do(f func([]string) ([]resources0.ApplicationResources, error)) *MockResourceAPIClientListResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceAPIClientListResourcesCall) DoAndReturn(f func([]string) ([]resources0.ApplicationResources, error)) *MockResourceAPIClientListResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Upload mocks base method.
func (m *MockResourceAPIClient) Upload(application, name, filename, pendingID string, reader io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", application, name, filename, pendingID, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockResourceAPIClientMockRecorder) Upload(application, name, filename, pendingID, reader any) *MockResourceAPIClientUploadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockResourceAPIClient)(nil).Upload), application, name, filename, pendingID, reader)
	return &MockResourceAPIClientUploadCall{Call: call}
}

// MockResourceAPIClientUploadCall wrap *gomock.Call
type MockResourceAPIClientUploadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceAPIClientUploadCall) Return(arg0 error) *MockResourceAPIClientUploadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceAPIClientUploadCall) Do(f func(string, string, string, string, io.ReadSeeker) error) *MockResourceAPIClientUploadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceAPIClientUploadCall) DoAndReturn(f func(string, string, string, string, io.ReadSeeker) error) *MockResourceAPIClientUploadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UploadPendingResource mocks base method.
func (m *MockResourceAPIClient) UploadPendingResource(applicationID string, resource resource.Resource, filename string, r io.ReadSeeker) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPendingResource", applicationID, resource, filename, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPendingResource indicates an expected call of UploadPendingResource.
func (mr *MockResourceAPIClientMockRecorder) UploadPendingResource(applicationID, resource, filename, r any) *MockResourceAPIClientUploadPendingResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPendingResource", reflect.TypeOf((*MockResourceAPIClient)(nil).UploadPendingResource), applicationID, resource, filename, r)
	return &MockResourceAPIClientUploadPendingResourceCall{Call: call}
}

// MockResourceAPIClientUploadPendingResourceCall wrap *gomock.Call
type MockResourceAPIClientUploadPendingResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceAPIClientUploadPendingResourceCall) Return(id string, err error) *MockResourceAPIClientUploadPendingResourceCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceAPIClientUploadPendingResourceCall) Do(f func(string, resource.Resource, string, io.ReadSeeker) (string, error)) *MockResourceAPIClientUploadPendingResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceAPIClientUploadPendingResourceCall) DoAndReturn(f func(string, resource.Resource, string, io.ReadSeeker) (string, error)) *MockResourceAPIClientUploadPendingResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretAPIClient is a mock of SecretAPIClient interface.
type MockSecretAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretAPIClientMockRecorder
	isgomock struct{}
}

// MockSecretAPIClientMockRecorder is the mock recorder for MockSecretAPIClient.
type MockSecretAPIClientMockRecorder struct {
	mock *MockSecretAPIClient
}

// NewMockSecretAPIClient creates a new mock instance.
func NewMockSecretAPIClient(ctrl *gomock.Controller) *MockSecretAPIClient {
	mock := &MockSecretAPIClient{ctrl: ctrl}
	mock.recorder = &MockSecretAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretAPIClient) EXPECT() *MockSecretAPIClientMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretAPIClient) CreateSecret(name, description string, data map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", name, description, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretAPIClientMockRecorder) CreateSecret(name, description, data any) *MockSecretAPIClientCreateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretAPIClient)(nil).CreateSecret), name, description, data)
	return &MockSecretAPIClientCreateSecretCall{Call: call}
}

// MockSecretAPIClientCreateSecretCall wrap *gomock.Call
type MockSecretAPIClientCreateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretAPIClientCreateSecretCall) Return(arg0 string, arg1 error) *MockSecretAPIClientCreateSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretAPIClientCreateSecretCall) Do(f func(string, string, map[string]string) (string, error)) *MockSecretAPIClientCreateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretAPIClientCreateSecretCall) DoAndReturn(f func(string, string, map[string]string) (string, error)) *MockSecretAPIClientCreateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GrantSecret mocks base method.
func (m *MockSecretAPIClient) GrantSecret(uri *secrets0.URI, name string, apps []string) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantSecret", uri, name, apps)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantSecret indicates an expected call of GrantSecret.
func (mr *MockSecretAPIClientMockRecorder) GrantSecret(uri, name, apps any) *MockSecretAPIClientGrantSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantSecret", reflect.TypeOf((*MockSecretAPIClient)(nil).GrantSecret), uri, name, apps)
	return &MockSecretAPIClientGrantSecretCall{Call: call}
}

// MockSecretAPIClientGrantSecretCall wrap *gomock.Call
type MockSecretAPIClientGrantSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretAPIClientGrantSecretCall) Return(arg0 []error, arg1 error) *MockSecretAPIClientGrantSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretAPIClientGrantSecretCall) Do(f func(*secrets0.URI, string, []string) ([]error, error)) *MockSecretAPIClientGrantSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretAPIClientGrantSecretCall) DoAndReturn(f func(*secrets0.URI, string, []string) ([]error, error)) *MockSecretAPIClientGrantSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecrets mocks base method.
func (m *MockSecretAPIClient) ListSecrets(reveal bool, filter secrets0.Filter) ([]secrets.SecretDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", reveal, filter)
	ret0, _ := ret[0].([]secrets.SecretDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretAPIClientMockRecorder) ListSecrets(reveal, filter any) *MockSecretAPIClientListSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretAPIClient)(nil).ListSecrets), reveal, filter)
	return &MockSecretAPIClientListSecretsCall{Call: call}
}

// MockSecretAPIClientListSecretsCall wrap *gomock.Call
type MockSecretAPIClientListSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretAPIClientListSecretsCall) Return(arg0 []secrets.SecretDetails, arg1 error) *MockSecretAPIClientListSecretsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretAPIClientListSecretsCall) Do(f func(bool, secrets0.Filter) ([]secrets.SecretDetails, error)) *MockSecretAPIClientListSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretAPIClientListSecretsCall) DoAndReturn(f func(bool, secrets0.Filter) ([]secrets.SecretDetails, error)) *MockSecretAPIClientListSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSecret mocks base method.
func (m *MockSecretAPIClient) RemoveSecret(uri *secrets0.URI, name string, revision *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSecret", uri, name, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecret indicates an expected call of RemoveSecret.
func (mr *MockSecretAPIClientMockRecorder) RemoveSecret(uri, name, revision any) *MockSecretAPIClientRemoveSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecret", reflect.TypeOf((*MockSecretAPIClient)(nil).RemoveSecret), uri, name, revision)
	return &MockSecretAPIClientRemoveSecretCall{Call: call}
}

// MockSecretAPIClientRemoveSecretCall wrap *gomock.Call
type MockSecretAPIClientRemoveSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretAPIClientRemoveSecretCall) Return(arg0 error) *MockSecretAPIClientRemoveSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretAPIClientRemoveSecretCall) Do(f func(*secrets0.URI, string, *int) error) *MockSecretAPIClientRemoveSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretAPIClientRemoveSecretCall) DoAndReturn(f func(*secrets0.URI, string, *int) error) *MockSecretAPIClientRemoveSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokeSecret mocks base method.
func (m *MockSecretAPIClient) RevokeSecret(uri *secrets0.URI, name string, apps []string) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecret", uri, name, apps)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeSecret indicates an expected call of RevokeSecret.
func (mr *MockSecretAPIClientMockRecorder) RevokeSecret(uri, name, apps any) *MockSecretAPIClientRevokeSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecret", reflect.TypeOf((*MockSecretAPIClient)(nil).RevokeSecret), uri, name, apps)
	return &MockSecretAPIClientRevokeSecretCall{Call: call}
}

// MockSecretAPIClientRevokeSecretCall wrap *gomock.Call
type MockSecretAPIClientRevokeSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretAPIClientRevokeSecretCall) Return(arg0 []error, arg1 error) *MockSecretAPIClientRevokeSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretAPIClientRevokeSecretCall) Do(f func(*secrets0.URI, string, []string) ([]error, error)) *MockSecretAPIClientRevokeSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretAPIClientRevokeSecretCall) DoAndReturn(f func(*secrets0.URI, string, []string) ([]error, error)) *MockSecretAPIClientRevokeSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecret mocks base method.
func (m *MockSecretAPIClient) UpdateSecret(uri *secrets0.URI, name string, autoPrune *bool, newName, description string, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", uri, name, autoPrune, newName, description, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockSecretAPIClientMockRecorder) UpdateSecret(uri, name, autoPrune, newName, description, data any) *MockSecretAPIClientUpdateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockSecretAPIClient)(nil).UpdateSecret), uri, name, autoPrune, newName, description, data)
	return &MockSecretAPIClientUpdateSecretCall{Call: call}
}

// MockSecretAPIClientUpdateSecretCall wrap *gomock.Call
type MockSecretAPIClientUpdateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretAPIClientUpdateSecretCall) Return(arg0 error) *MockSecretAPIClientUpdateSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretAPIClientUpdateSecretCall) Do(f func(*secrets0.URI, string, *bool, string, string, map[string]string) error) *MockSecretAPIClientUpdateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretAPIClientUpdateSecretCall) DoAndReturn(f func(*secrets0.URI, string, *bool, string, string, map[string]string) error) *MockSecretAPIClientUpdateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockJaasAPIClient is a mock of JaasAPIClient interface.
type MockJaasAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockJaasAPIClientMockRecorder
	isgomock struct{}
}

// MockJaasAPIClientMockRecorder is the mock recorder for MockJaasAPIClient.
type MockJaasAPIClientMockRecorder struct {
	mock *MockJaasAPIClient
}

// NewMockJaasAPIClient creates a new mock instance.
func NewMockJaasAPIClient(ctrl *gomock.Controller) *MockJaasAPIClient {
	mock := &MockJaasAPIClient{ctrl: ctrl}
	mock.recorder = &MockJaasAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJaasAPIClient) EXPECT() *MockJaasAPIClientMockRecorder {
	return m.recorder
}

// AddGroup mocks base method.
func (m *MockJaasAPIClient) AddGroup(req *params.AddGroupRequest) (params.AddGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroup", req)
	ret0, _ := ret[0].(params.AddGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroup indicates an expected call of AddGroup.
func (mr *MockJaasAPIClientMockRecorder) AddGroup(req any) *MockJaasAPIClientAddGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroup", reflect.TypeOf((*MockJaasAPIClient)(nil).AddGroup), req)
	return &MockJaasAPIClientAddGroupCall{Call: call}
}

// MockJaasAPIClientAddGroupCall wrap *gomock.Call
type MockJaasAPIClientAddGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientAddGroupCall) Return(arg0 params.AddGroupResponse, arg1 error) *MockJaasAPIClientAddGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientAddGroupCall) Do(f func(*params.AddGroupRequest) (params.AddGroupResponse, error)) *MockJaasAPIClientAddGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientAddGroupCall) DoAndReturn(f func(*params.AddGroupRequest) (params.AddGroupResponse, error)) *MockJaasAPIClientAddGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRelation mocks base method.
func (m *MockJaasAPIClient) AddRelation(req *params.AddRelationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockJaasAPIClientMockRecorder) AddRelation(req any) *MockJaasAPIClientAddRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockJaasAPIClient)(nil).AddRelation), req)
	return &MockJaasAPIClientAddRelationCall{Call: call}
}

// MockJaasAPIClientAddRelationCall wrap *gomock.Call
type MockJaasAPIClientAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientAddRelationCall) Return(arg0 error) *MockJaasAPIClientAddRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientAddRelationCall) Do(f func(*params.AddRelationRequest) error) *MockJaasAPIClientAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientAddRelationCall) DoAndReturn(f func(*params.AddRelationRequest) error) *MockJaasAPIClientAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRole mocks base method.
func (m *MockJaasAPIClient) AddRole(req *params.AddRoleRequest) (params.AddRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", req)
	ret0, _ := ret[0].(params.AddRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRole indicates an expected call of AddRole.
func (mr *MockJaasAPIClientMockRecorder) AddRole(req any) *MockJaasAPIClientAddRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockJaasAPIClient)(nil).AddRole), req)
	return &MockJaasAPIClientAddRoleCall{Call: call}
}

// MockJaasAPIClientAddRoleCall wrap *gomock.Call
type MockJaasAPIClientAddRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientAddRoleCall) Return(arg0 params.AddRoleResponse, arg1 error) *MockJaasAPIClientAddRoleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientAddRoleCall) Do(f func(*params.AddRoleRequest) (params.AddRoleResponse, error)) *MockJaasAPIClientAddRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientAddRoleCall) DoAndReturn(f func(*params.AddRoleRequest) (params.AddRoleResponse, error)) *MockJaasAPIClientAddRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroup mocks base method.
func (m *MockJaasAPIClient) GetGroup(req *params.GetGroupRequest) (params.GetGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", req)
	ret0, _ := ret[0].(params.GetGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockJaasAPIClientMockRecorder) GetGroup(req any) *MockJaasAPIClientGetGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockJaasAPIClient)(nil).GetGroup), req)
	return &MockJaasAPIClientGetGroupCall{Call: call}
}

// MockJaasAPIClientGetGroupCall wrap *gomock.Call
type MockJaasAPIClientGetGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientGetGroupCall) Return(arg0 params.GetGroupResponse, arg1 error) *MockJaasAPIClientGetGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientGetGroupCall) Do(f func(*params.GetGroupRequest) (params.GetGroupResponse, error)) *MockJaasAPIClientGetGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientGetGroupCall) DoAndReturn(f func(*params.GetGroupRequest) (params.GetGroupResponse, error)) *MockJaasAPIClientGetGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRole mocks base method.
func (m *MockJaasAPIClient) GetRole(req *params.GetRoleRequest) (params.GetRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", req)
	ret0, _ := ret[0].(params.GetRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockJaasAPIClientMockRecorder) GetRole(req any) *MockJaasAPIClientGetRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockJaasAPIClient)(nil).GetRole), req)
	return &MockJaasAPIClientGetRoleCall{Call: call}
}

// MockJaasAPIClientGetRoleCall wrap *gomock.Call
type MockJaasAPIClientGetRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientGetRoleCall) Return(arg0 params.GetRoleResponse, arg1 error) *MockJaasAPIClientGetRoleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientGetRoleCall) Do(f func(*params.GetRoleRequest) (params.GetRoleResponse, error)) *MockJaasAPIClientGetRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientGetRoleCall) DoAndReturn(f func(*params.GetRoleRequest) (params.GetRoleResponse, error)) *MockJaasAPIClientGetRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRelationshipTuples mocks base method.
func (m *MockJaasAPIClient) ListRelationshipTuples(req *params.ListRelationshipTuplesRequest) (*params.ListRelationshipTuplesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelationshipTuples", req)
	ret0, _ := ret[0].(*params.ListRelationshipTuplesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelationshipTuples indicates an expected call of ListRelationshipTuples.
func (mr *MockJaasAPIClientMockRecorder) ListRelationshipTuples(req any) *MockJaasAPIClientListRelationshipTuplesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationshipTuples", reflect.TypeOf((*MockJaasAPIClient)(nil).ListRelationshipTuples), req)
	return &MockJaasAPIClientListRelationshipTuplesCall{Call: call}
}

// MockJaasAPIClientListRelationshipTuplesCall wrap *gomock.Call
type MockJaasAPIClientListRelationshipTuplesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientListRelationshipTuplesCall) Return(arg0 *params.ListRelationshipTuplesResponse, arg1 error) *MockJaasAPIClientListRelationshipTuplesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientListRelationshipTuplesCall) Do(f func(*params.ListRelationshipTuplesRequest) (*params.ListRelationshipTuplesResponse, error)) *MockJaasAPIClientListRelationshipTuplesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientListRelationshipTuplesCall) DoAndReturn(f func(*params.ListRelationshipTuplesRequest) (*params.ListRelationshipTuplesResponse, error)) *MockJaasAPIClientListRelationshipTuplesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveGroup mocks base method.
func (m *MockJaasAPIClient) RemoveGroup(req *params.RemoveGroupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroup", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup.
func (mr *MockJaasAPIClientMockRecorder) RemoveGroup(req any) *MockJaasAPIClientRemoveGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockJaasAPIClient)(nil).RemoveGroup), req)
	return &MockJaasAPIClientRemoveGroupCall{Call: call}
}

// MockJaasAPIClientRemoveGroupCall wrap *gomock.Call
type MockJaasAPIClientRemoveGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientRemoveGroupCall) Return(arg0 error) *MockJaasAPIClientRemoveGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientRemoveGroupCall) Do(f func(*params.RemoveGroupRequest) error) *MockJaasAPIClientRemoveGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientRemoveGroupCall) DoAndReturn(f func(*params.RemoveGroupRequest) error) *MockJaasAPIClientRemoveGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveRelation mocks base method.
func (m *MockJaasAPIClient) RemoveRelation(req *params.RemoveRelationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRelation", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRelation indicates an expected call of RemoveRelation.
func (mr *MockJaasAPIClientMockRecorder) RemoveRelation(req any) *MockJaasAPIClientRemoveRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRelation", reflect.TypeOf((*MockJaasAPIClient)(nil).RemoveRelation), req)
	return &MockJaasAPIClientRemoveRelationCall{Call: call}
}

// MockJaasAPIClientRemoveRelationCall wrap *gomock.Call
type MockJaasAPIClientRemoveRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientRemoveRelationCall) Return(arg0 error) *MockJaasAPIClientRemoveRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientRemoveRelationCall) Do(f func(*params.RemoveRelationRequest) error) *MockJaasAPIClientRemoveRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientRemoveRelationCall) DoAndReturn(f func(*params.RemoveRelationRequest) error) *MockJaasAPIClientRemoveRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveRole mocks base method.
func (m *MockJaasAPIClient) RemoveRole(req *params.RemoveRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockJaasAPIClientMockRecorder) RemoveRole(req any) *MockJaasAPIClientRemoveRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockJaasAPIClient)(nil).RemoveRole), req)
	return &MockJaasAPIClientRemoveRoleCall{Call: call}
}

// MockJaasAPIClientRemoveRoleCall wrap *gomock.Call
type MockJaasAPIClientRemoveRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientRemoveRoleCall) Return(arg0 error) *MockJaasAPIClientRemoveRoleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientRemoveRoleCall) Do(f func(*params.RemoveRoleRequest) error) *MockJaasAPIClientRemoveRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientRemoveRoleCall) DoAndReturn(f func(*params.RemoveRoleRequest) error) *MockJaasAPIClientRemoveRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameGroup mocks base method.
func (m *MockJaasAPIClient) RenameGroup(req *params.RenameGroupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameGroup", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameGroup indicates an expected call of RenameGroup.
func (mr *MockJaasAPIClientMockRecorder) RenameGroup(req any) *MockJaasAPIClientRenameGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameGroup", reflect.TypeOf((*MockJaasAPIClient)(nil).RenameGroup), req)
	return &MockJaasAPIClientRenameGroupCall{Call: call}
}

// MockJaasAPIClientRenameGroupCall wrap *gomock.Call
type MockJaasAPIClientRenameGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientRenameGroupCall) Return(arg0 error) *MockJaasAPIClientRenameGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientRenameGroupCall) Do(f func(*params.RenameGroupRequest) error) *MockJaasAPIClientRenameGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientRenameGroupCall) DoAndReturn(f func(*params.RenameGroupRequest) error) *MockJaasAPIClientRenameGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameRole mocks base method.
func (m *MockJaasAPIClient) RenameRole(req *params.RenameRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameRole", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameRole indicates an expected call of RenameRole.
func (mr *MockJaasAPIClientMockRecorder) RenameRole(req any) *MockJaasAPIClientRenameRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameRole", reflect.TypeOf((*MockJaasAPIClient)(nil).RenameRole), req)
	return &MockJaasAPIClientRenameRoleCall{Call: call}
}

// MockJaasAPIClientRenameRoleCall wrap *gomock.Call
type MockJaasAPIClientRenameRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJaasAPIClientRenameRoleCall) Return(arg0 error) *MockJaasAPIClientRenameRoleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJaasAPIClientRenameRoleCall) Do(f func(*params.RenameRoleRequest) error) *MockJaasAPIClientRenameRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJaasAPIClientRenameRoleCall) DoAndReturn(f func(*params.RenameRoleRequest) error) *MockJaasAPIClientRenameRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockKubernetesCloudAPIClient is a mock of KubernetesCloudAPIClient interface.
type MockKubernetesCloudAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesCloudAPIClientMockRecorder
	isgomock struct{}
}

// MockKubernetesCloudAPIClientMockRecorder is the mock recorder for MockKubernetesCloudAPIClient.
type MockKubernetesCloudAPIClientMockRecorder struct {
	mock *MockKubernetesCloudAPIClient
}

// NewMockKubernetesCloudAPIClient creates a new mock instance.
func NewMockKubernetesCloudAPIClient(ctrl *gomock.Controller) *MockKubernetesCloudAPIClient {
	mock := &MockKubernetesCloudAPIClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesCloudAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesCloudAPIClient) EXPECT() *MockKubernetesCloudAPIClientMockRecorder {
	return m.recorder
}

// AddCloud mocks base method.
func (m *MockKubernetesCloudAPIClient) AddCloud(cloud cloud.Cloud, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloud", cloud, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCloud indicates an expected call of AddCloud.
func (mr *MockKubernetesCloudAPIClientMockRecorder) AddCloud(cloud, force any) *MockKubernetesCloudAPIClientAddCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloud", reflect.TypeOf((*MockKubernetesCloudAPIClient)(nil).AddCloud), cloud, force)
	return &MockKubernetesCloudAPIClientAddCloudCall{Call: call}
}

// MockKubernetesCloudAPIClientAddCloudCall wrap *gomock.Call
type MockKubernetesCloudAPIClientAddCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKubernetesCloudAPIClientAddCloudCall) Return(arg0 error) *MockKubernetesCloudAPIClientAddCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKubernetesCloudAPIClientAddCloudCall) Do(f func(cloud.Cloud, bool) error) *MockKubernetesCloudAPIClientAddCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKubernetesCloudAPIClientAddCloudCall) DoAndReturn(f func(cloud.Cloud, bool) error) *MockKubernetesCloudAPIClientAddCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddCredential mocks base method.
func (m *MockKubernetesCloudAPIClient) AddCredential(cloud string, credential cloud.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredential", cloud, credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCredential indicates an expected call of AddCredential.
func (mr *MockKubernetesCloudAPIClientMockRecorder) AddCredential(cloud, credential any) *MockKubernetesCloudAPIClientAddCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredential", reflect.TypeOf((*MockKubernetesCloudAPIClient)(nil).AddCredential), cloud, credential)
	return &MockKubernetesCloudAPIClientAddCredentialCall{Call: call}
}

// MockKubernetesCloudAPIClientAddCredentialCall wrap *gomock.Call
type MockKubernetesCloudAPIClientAddCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKubernetesCloudAPIClientAddCredentialCall) Return(arg0 error) *MockKubernetesCloudAPIClientAddCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKubernetesCloudAPIClientAddCredentialCall) Do(f func(string, cloud.Credential) error) *MockKubernetesCloudAPIClientAddCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKubernetesCloudAPIClientAddCredentialCall) DoAndReturn(f func(string, cloud.Credential) error) *MockKubernetesCloudAPIClientAddCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cloud mocks base method.
func (m *MockKubernetesCloudAPIClient) Cloud(tag names.CloudTag) (cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", tag)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud.
func (mr *MockKubernetesCloudAPIClientMockRecorder) Cloud(tag any) *MockKubernetesCloudAPIClientCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockKubernetesCloudAPIClient)(nil).Cloud), tag)
	return &MockKubernetesCloudAPIClientCloudCall{Call: call}
}

// MockKubernetesCloudAPIClientCloudCall wrap *gomock.Call
type MockKubernetesCloudAPIClientCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKubernetesCloudAPIClientCloudCall) Return(arg0 cloud.Cloud, arg1 error) *MockKubernetesCloudAPIClientCloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKubernetesCloudAPIClientCloudCall) Do(f func(names.CloudTag) (cloud.Cloud, error)) *MockKubernetesCloudAPIClientCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKubernetesCloudAPIClientCloudCall) DoAndReturn(f func(names.CloudTag) (cloud.Cloud, error)) *MockKubernetesCloudAPIClientCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveCloud mocks base method.
func (m *MockKubernetesCloudAPIClient) RemoveCloud(cloud string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloud", cloud)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloud indicates an expected call of RemoveCloud.
func (mr *MockKubernetesCloudAPIClientMockRecorder) RemoveCloud(cloud any) *MockKubernetesCloudAPIClientRemoveCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloud", reflect.TypeOf((*MockKubernetesCloudAPIClient)(nil).RemoveCloud), cloud)
	return &MockKubernetesCloudAPIClientRemoveCloudCall{Call: call}
}

// MockKubernetesCloudAPIClientRemoveCloudCall wrap *gomock.Call
type MockKubernetesCloudAPIClientRemoveCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKubernetesCloudAPIClientRemoveCloudCall) Return(arg0 error) *MockKubernetesCloudAPIClientRemoveCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKubernetesCloudAPIClientRemoveCloudCall) Do(f func(string) error) *MockKubernetesCloudAPIClientRemoveCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKubernetesCloudAPIClientRemoveCloudCall) DoAndReturn(f func(string) error) *MockKubernetesCloudAPIClientRemoveCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloud mocks base method.
func (m *MockKubernetesCloudAPIClient) UpdateCloud(cloud cloud.Cloud) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloud", cloud)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloud indicates an expected call of UpdateCloud.
func (mr *MockKubernetesCloudAPIClientMockRecorder) UpdateCloud(cloud any) *MockKubernetesCloudAPIClientUpdateCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloud", reflect.TypeOf((*MockKubernetesCloudAPIClient)(nil).UpdateCloud), cloud)
	return &MockKubernetesCloudAPIClientUpdateCloudCall{Call: call}
}

// MockKubernetesCloudAPIClientUpdateCloudCall wrap *gomock.Call
type MockKubernetesCloudAPIClientUpdateCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKubernetesCloudAPIClientUpdateCloudCall) Return(arg0 error) *MockKubernetesCloudAPIClientUpdateCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKubernetesCloudAPIClientUpdateCloudCall) Do(f func(cloud.Cloud) error) *MockKubernetesCloudAPIClientUpdateCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKubernetesCloudAPIClientUpdateCloudCall) DoAndReturn(f func(cloud.Cloud) error) *MockKubernetesCloudAPIClientUpdateCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UserCredentials mocks base method.
func (m *MockKubernetesCloudAPIClient) UserCredentials(user names.UserTag, cloud names.CloudTag) ([]names.CloudCredentialTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCredentials", user, cloud)
	ret0, _ := ret[0].([]names.CloudCredentialTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCredentials indicates an expected call of UserCredentials.
func (mr *MockKubernetesCloudAPIClientMockRecorder) UserCredentials(user, cloud any) *MockKubernetesCloudAPIClientUserCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCredentials", reflect.TypeOf((*MockKubernetesCloudAPIClient)(nil).UserCredentials), user, cloud)
	return &MockKubernetesCloudAPIClientUserCredentialsCall{Call: call}
}

// MockKubernetesCloudAPIClientUserCredentialsCall wrap *gomock.Call
type MockKubernetesCloudAPIClientUserCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKubernetesCloudAPIClientUserCredentialsCall) Return(arg0 []names.CloudCredentialTag, arg1 error) *MockKubernetesCloudAPIClientUserCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKubernetesCloudAPIClientUserCredentialsCall) Do(f func(names.UserTag, names.CloudTag) ([]names.CloudCredentialTag, error)) *MockKubernetesCloudAPIClientUserCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKubernetesCloudAPIClientUserCredentialsCall) DoAndReturn(f func(names.UserTag, names.CloudTag) ([]names.CloudCredentialTag, error)) *MockKubernetesCloudAPIClientUserCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmhubClient is a mock of CharmhubClient interface.
type MockCharmhubClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharmhubClientMockRecorder
	isgomock struct{}
}

// MockCharmhubClientMockRecorder is the mock recorder for MockCharmhubClient.
type MockCharmhubClientMockRecorder struct {
	mock *MockCharmhubClient
}

// NewMockCharmhubClient creates a new mock instance.
func NewMockCharmhubClient(ctrl *gomock.Controller) *MockCharmhubClient {
	mock := &MockCharmhubClient{ctrl: ctrl}
	mock.recorder = &MockCharmhubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmhubClient) EXPECT() *MockCharmhubClientMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockCharmhubClient) Info(arg0 context.Context, arg1 string, arg2 ...charmhub.InfoOption) (transport.InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(transport.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockCharmhubClientMockRecorder) Info(arg0, arg1 any, arg2 ...any) *MockCharmhubClientInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCharmhubClient)(nil).Info), varargs...)
	return &MockCharmhubClientInfoCall{Call: call}
}

// MockCharmhubClientInfoCall wrap *gomock.Call
type MockCharmhubClientInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmhubClientInfoCall) Return(arg0 transport.InfoResponse, arg1 error) *MockCharmhubClientInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmhubClientInfoCall) Do(f func(context.Context, string, ...charmhub.InfoOption) (transport.InfoResponse, error)) *MockCharmhubClientInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmhubClientInfoCall) DoAndReturn(f func(context.Context, string, ...charmhub.InfoOption) (transport.InfoResponse, error)) *MockCharmhubClientInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
